{
  "swagger": "2.0",
  "info": {
    "version": "3.0.0",
    "title": "Menus API documentation",
    "description": "Documentation of MenusAPI",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "contact@toto.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:8081/menusapi/api/v1",
  "servers": [
    {
      "url": "http://localhost:8081/menusapi/api/v1/"
    }
  ],
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "name": "authorization",
      "scheme": "bearer",
      "bearerFormat": "JWT",
      "in": "header"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Service to register a new user",
        "description": "Service to register a new user for the menu API",
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "user Signin information",
            "schema": {
              "$ref": "#/definitions/AddUser"
            }
          }
        ],
        "responses": {}
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Service to log a user",
        "description": "Service to login a user into menuAPI",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "example": "any"
                },
                "schema": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Some description...",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "you are connected!"
                },
                "id": {
                  "type": "string",
                  "example": "DKeFxdgpRpHGfCKwNx7D"
                },
                "jwt": {
                  "type": "string",
                  "example": "A very long token"
                },
                "refreshJwt": {
                  "type": "string",
                  "example": "An other very long token!"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Service to get information",
        "description": "Service to get information about current user",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/menus": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Service to get all menus from the database",
        "description": "Service to get all menus from the database",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/menus/{menuId}": {
      "get": {
        "tags": [
          "Menus"
        ],
        "summary": "Service to get one menu from the database",
        "description": "Service to get one menu from the database",
        "parameters": [
          {
            "name": "menuId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/createmenu": {
      "post": {
        "tags": [
          "Menus"
        ],
        "summary": "Service to create menus and send to the database",
        "description": "Service to create menus",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/deletemenu": {
      "delete": {
        "tags": [
          "Menus"
        ],
        "summary": "Service to delete",
        "description": "Service to delete a Menus",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "menuId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/updatemenu": {
      "put": {
        "tags": [
          "Menus"
        ],
        "summary": "Service to update a menu from the database",
        "description": "Service to get update a menu",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "AddUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of the user",
          "example": "John Doe"
        },
        "email": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$",
          "description": "email of the user",
          "example": "toto@gmail.com"
        },
        "password": {
          "type": "string",
          "description": "password of the user",
          "pattern": "^(?=.*[0-9]{3})(?=.*[!@#$%^&*]{2}).{13,}$",
          "example": "fsdfsd2+65ffds"
        },
        "pseudo": {
          "type": "string",
          "description": "The user pseudo",
          "example": "DilidoMaster"
        },
        "admin": {
          "type": "boolean",
          "description": "set if user is an admin or not",
          "example": true
        }
      },
      "required": [
        "name",
        "email",
        "password",
        "admin"
      ]
    }
  }
}